// <auto-generated />
using System;
using ELearning.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ELearning.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250421192234_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("CategoryCourse", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoriesId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CategoryCourse");
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.Property<Guid>("EnrolledCoursesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EnrolledStudentsId")
                        .HasColumnType("TEXT");

                    b.HasKey("EnrolledCoursesId", "EnrolledStudentsId");

                    b.HasIndex("EnrolledStudentsId");

                    b.ToTable("CourseUser");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuizAttemptId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizAttemptId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6766040e-ee81-4bd7-b8fb-c63e379f7861"),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(2745),
                            Description = "Learn programming languages and software development",
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Programming"
                        },
                        new
                        {
                            Id = new Guid("a53d9859-d952-46b5-aff6-bdda03818759"),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(2767),
                            Description = "Learn web development technologies",
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Web Development"
                        },
                        new
                        {
                            Id = new Guid("134ebc4e-a4e0-4a45-a671-a744c2158b3a"),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(2792),
                            Description = "Learn data science and analytics",
                            IconUrl = "",
                            IsDeleted = false,
                            Name = "Data Science"
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationInWeeks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c33c8a22-4def-4f4e-8b80-9d04f109b0b3"),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(2994),
                            Description = "Learn the fundamentals of C# programming",
                            DurationInWeeks = 0,
                            InstructorId = new Guid("9454cf5f-982f-4b84-a4ed-71fedb072162"),
                            IsDeleted = false,
                            IsPublished = true,
                            Level = 0,
                            Price = 49.99m,
                            Status = 0,
                            Title = "Introduction to C#"
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Enrollment", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("c8e303da-66dc-4367-baa3-fd4f02a740ef"),
                            CourseId = new Guid("c33c8a22-4def-4f4e-8b80-9d04f109b0b3"),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(3317),
                            EnrolledAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(3315),
                            Id = new Guid("6d77eab9-f799-41d5-a68c-b4ba9b8aec8e"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04c21d93-5e7d-4a5a-bdbe-c67cff58dc1f"),
                            Content = "In this lesson, we'll learn about variables and data types...",
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(3126),
                            Description = "Understanding variables and data types in C#",
                            DurationInMinutes = 30,
                            IsDeleted = false,
                            ModuleId = new Guid("f84a5d98-5e7d-4961-9bd8-1c4631edd4df"),
                            Order = 1,
                            Title = "Variables and Data Types"
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f84a5d98-5e7d-4961-9bd8-1c4631edd4df"),
                            CourseId = new Guid("c33c8a22-4def-4f4e-8b80-9d04f109b0b3"),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(3073),
                            Description = "Learn the basics of C# syntax and programming concepts",
                            IsDeleted = false,
                            Order = 1,
                            Title = "Getting Started with C#"
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f789e66-944c-42a8-b1d3-92e673745ca9"),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(3269),
                            IsCorrect = true,
                            IsDeleted = false,
                            QuestionId = new Guid("6e7f7847-a314-45d8-8f16-c1748a858d58"),
                            Text = "A container for storing data"
                        },
                        new
                        {
                            Id = new Guid("5b9d2bbf-f779-4587-a2de-a2ad125f38db"),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(3274),
                            IsCorrect = false,
                            IsDeleted = false,
                            QuestionId = new Guid("6e7f7847-a314-45d8-8f16-c1748a858d58"),
                            Text = "A method in C#"
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Progress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeSpent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Progress");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e7f7847-a314-45d8-8f16-c1748a858d58"),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(3226),
                            IsDeleted = false,
                            Points = 10,
                            QuizId = new Guid("fd2f96eb-af61-4487-ac50-0855c18dbefc"),
                            Text = "What is a variable in C#?",
                            Type = 0
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PassingScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeLimitInMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd2f96eb-af61-4487-ac50-0855c18dbefc"),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(3175),
                            Description = "Test your knowledge of C# basics",
                            InstructorId = new Guid("9454cf5f-982f-4b84-a4ed-71fedb072162"),
                            IsDeleted = false,
                            IsPublished = true,
                            ModuleId = new Guid("f84a5d98-5e7d-4961-9bd8-1c4631edd4df"),
                            PassingScore = 70,
                            TimeLimitInMinutes = 30,
                            Title = "C# Basics Quiz"
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.QuizAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Passed")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("QuizAttempts");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("LessonId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Feedback")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("ELearning.Core.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9454cf5f-982f-4b84-a4ed-71fedb072162"),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(2913),
                            Email = "instructor@example.com",
                            FirstName = "John",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = "AQAAAAIAAYagAAAAELbHJBk5JqrA4j9w9G6h2Q6Y4/UdH0zYZRgT5r4HuPGXWEyEFnxiWNVJJBgZXg==",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("c8e303da-66dc-4367-baa3-fd4f02a740ef"),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 22, 33, 769, DateTimeKind.Utc).AddTicks(2921),
                            Email = "student@example.com",
                            FirstName = "Jane",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Smith",
                            PasswordHash = "AQAAAAIAAYagAAAAELbHJBk5JqrA4j9w9G6h2Q6Y4/UdH0zYZRgT5r4HuPGXWEyEFnxiWNVJJBgZXg==",
                            Role = 0
                        });
                });

            modelBuilder.Entity("CategoryCourse", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Course", null)
                        .WithMany()
                        .HasForeignKey("EnrolledCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("EnrolledStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELearning.Core.Domain.Answer", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.QuizAttempt", "QuizAttempt")
                        .WithMany("Answers")
                        .HasForeignKey("QuizAttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuizAttempt");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Assignment", b =>
                {
                    b.HasOne("ELearning.Core.Domain.User", "Instructor")
                        .WithMany("Assignments")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.Module", "Module")
                        .WithMany("Assignments")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Category", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Course", b =>
                {
                    b.HasOne("ELearning.Core.Domain.User", "Instructor")
                        .WithMany("InstructedCourses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Enrollment", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.User", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Lesson", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Module", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Option", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Progress", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Lesson", "Lesson")
                        .WithMany("StudentProgress")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.User", "Student")
                        .WithMany("LessonProgress")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Question", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Quiz", b =>
                {
                    b.HasOne("ELearning.Core.Domain.User", "Instructor")
                        .WithMany("Quizzes")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.Module", "Module")
                        .WithMany("Quizzes")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ELearning.Core.Domain.QuizAttempt", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Quiz", "Quiz")
                        .WithMany("Attempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.User", "Student")
                        .WithMany("QuizAttempts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Resource", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Lesson", "Lesson")
                        .WithMany("Resources")
                        .HasForeignKey("LessonId");

                    b.HasOne("ELearning.Core.Domain.Module", "Module")
                        .WithMany("Resources")
                        .HasForeignKey("ModuleId");

                    b.Navigation("Lesson");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Review", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.User", "Student")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Submission", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.User", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Modules");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Lesson", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("StudentProgress");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Module", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Lessons");

                    b.Navigation("Quizzes");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Quiz", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ELearning.Core.Domain.QuizAttempt", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ELearning.Core.Domain.User", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Enrollments");

                    b.Navigation("InstructedCourses");

                    b.Navigation("LessonProgress");

                    b.Navigation("QuizAttempts");

                    b.Navigation("Quizzes");

                    b.Navigation("Reviews");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
