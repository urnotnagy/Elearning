// <auto-generated />
using System;
using ELearning.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ELearning.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250422172614_AddCategoriesCoursesRelation")]
    partial class AddCategoriesCoursesRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("CategoryCourse", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CoursesId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoriesId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CourseCategories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoriesId = new Guid("23e2576c-274c-4da8-9dc9-99649fcf8957"),
                            CoursesId = new Guid("51730bd4-b4e4-458f-b629-f9b349e2430c")
                        },
                        new
                        {
                            CategoriesId = new Guid("e10f510e-7c64-473b-bdaf-f172e8c71e5e"),
                            CoursesId = new Guid("6527b9a8-8da9-402c-97ee-5c4d30d6a3cd")
                        },
                        new
                        {
                            CategoriesId = new Guid("d621af3d-6ca5-4ec1-84be-3436dd70d652"),
                            CoursesId = new Guid("c06d725c-247e-4e44-99d0-4f89f1f6ea5c")
                        },
                        new
                        {
                            CategoriesId = new Guid("671a8cf6-5719-470c-93f4-955dd934e018"),
                            CoursesId = new Guid("c6994240-f166-403f-a81a-2cccf2da90bd")
                        },
                        new
                        {
                            CategoriesId = new Guid("ba15c181-cab4-4cc0-a6f2-9d6fa3aae9c2"),
                            CoursesId = new Guid("84fd87c3-8e35-453c-8814-5eed1ddde358")
                        },
                        new
                        {
                            CategoriesId = new Guid("d621af3d-6ca5-4ec1-84be-3436dd70d652"),
                            CoursesId = new Guid("bdbf0171-3513-4bfc-b69b-98291fec6d68")
                        },
                        new
                        {
                            CategoriesId = new Guid("71f4cb4b-1ec6-4803-8b73-ca3dca27857e"),
                            CoursesId = new Guid("5404eecb-f375-4f20-9826-af9f6f59f0e6")
                        },
                        new
                        {
                            CategoriesId = new Guid("6dd69128-e3e1-45ae-8bde-267d6f8849ac"),
                            CoursesId = new Guid("9bba6c5c-8642-4bf6-a0dd-c017c002ba73")
                        });
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.Property<Guid>("EnrolledCoursesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EnrolledStudentsId")
                        .HasColumnType("TEXT");

                    b.HasKey("EnrolledCoursesId", "EnrolledStudentsId");

                    b.HasIndex("EnrolledStudentsId");

                    b.ToTable("CourseUser");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuizAttemptId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizAttemptId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23e2576c-274c-4da8-9dc9-99649fcf8957"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6271),
                            Description = "Learn programming languages and software development",
                            IconUrl = "https://example.com/icons/programming.png",
                            IsDeleted = false,
                            Name = "Programming"
                        },
                        new
                        {
                            Id = new Guid("e10f510e-7c64-473b-bdaf-f172e8c71e5e"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6293),
                            Description = "Learn web development technologies",
                            IconUrl = "https://example.com/icons/web-dev.png",
                            IsDeleted = false,
                            Name = "Web Development",
                            ParentCategoryId = new Guid("23e2576c-274c-4da8-9dc9-99649fcf8957")
                        },
                        new
                        {
                            Id = new Guid("d621af3d-6ca5-4ec1-84be-3436dd70d652"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6301),
                            Description = "Learn data science and analytics",
                            IconUrl = "https://example.com/icons/data-science.png",
                            IsDeleted = false,
                            Name = "Data Science"
                        },
                        new
                        {
                            Id = new Guid("671a8cf6-5719-470c-93f4-955dd934e018"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6305),
                            Description = "Learn frontend technologies like HTML, CSS, and JavaScript",
                            IconUrl = "https://example.com/icons/frontend.png",
                            IsDeleted = false,
                            Name = "Frontend Development",
                            ParentCategoryId = new Guid("e10f510e-7c64-473b-bdaf-f172e8c71e5e")
                        },
                        new
                        {
                            Id = new Guid("ba15c181-cab4-4cc0-a6f2-9d6fa3aae9c2"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6309),
                            Description = "Learn backend technologies and server-side programming",
                            IconUrl = "https://example.com/icons/backend.png",
                            IsDeleted = false,
                            Name = "Backend Development",
                            ParentCategoryId = new Guid("e10f510e-7c64-473b-bdaf-f172e8c71e5e")
                        },
                        new
                        {
                            Id = new Guid("71f4cb4b-1ec6-4803-8b73-ca3dca27857e"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6317),
                            Description = "Learn mobile app development for iOS and Android",
                            IconUrl = "https://example.com/icons/mobile-dev.png",
                            IsDeleted = false,
                            Name = "Mobile Development",
                            ParentCategoryId = new Guid("23e2576c-274c-4da8-9dc9-99649fcf8957")
                        },
                        new
                        {
                            Id = new Guid("6dd69128-e3e1-45ae-8bde-267d6f8849ac"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6321),
                            Description = "Learn machine learning algorithms and techniques",
                            IconUrl = "https://example.com/icons/machine-learning.png",
                            IsDeleted = false,
                            Name = "Machine Learning",
                            ParentCategoryId = new Guid("d621af3d-6ca5-4ec1-84be-3436dd70d652")
                        },
                        new
                        {
                            Id = new Guid("6e3e1a0a-b9ea-4183-bda2-06e8b406ff7e"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6367),
                            Description = "Learn big data processing and analytics",
                            IconUrl = "https://example.com/icons/big-data.png",
                            IsDeleted = false,
                            Name = "Big Data",
                            ParentCategoryId = new Guid("d621af3d-6ca5-4ec1-84be-3436dd70d652")
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationInWeeks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51730bd4-b4e4-458f-b629-f9b349e2430c"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6592),
                            Description = "Learn the fundamentals of C# programming",
                            DurationInWeeks = 8,
                            InstructorId = new Guid("05960a70-06b6-40e0-b18e-e03ddae0e5b5"),
                            IsDeleted = false,
                            IsPublished = true,
                            Level = 0,
                            Price = 49.99m,
                            Status = 1,
                            Title = "Introduction to C#"
                        },
                        new
                        {
                            Id = new Guid("6527b9a8-8da9-402c-97ee-5c4d30d6a3cd"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6601),
                            Description = "Learn HTML, CSS, and JavaScript for web development",
                            DurationInWeeks = 10,
                            InstructorId = new Guid("05960a70-06b6-40e0-b18e-e03ddae0e5b5"),
                            IsDeleted = false,
                            IsPublished = true,
                            Level = 0,
                            Price = 59.99m,
                            Status = 1,
                            Title = "Web Development Fundamentals"
                        },
                        new
                        {
                            Id = new Guid("c06d725c-247e-4e44-99d0-4f89f1f6ea5c"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6608),
                            Description = "Learn the fundamentals of data science and analytics",
                            DurationInWeeks = 12,
                            InstructorId = new Guid("05960a70-06b6-40e0-b18e-e03ddae0e5b5"),
                            IsDeleted = false,
                            IsPublished = true,
                            Level = 1,
                            Price = 69.99m,
                            Status = 1,
                            Title = "Data Science Essentials"
                        },
                        new
                        {
                            Id = new Guid("c6994240-f166-403f-a81a-2cccf2da90bd"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6614),
                            Description = "Learn React.js for building modern web applications",
                            DurationInWeeks = 8,
                            InstructorId = new Guid("05960a70-06b6-40e0-b18e-e03ddae0e5b5"),
                            IsDeleted = false,
                            IsPublished = true,
                            Level = 1,
                            Price = 79.99m,
                            Status = 1,
                            Title = "React.js for Frontend Development"
                        },
                        new
                        {
                            Id = new Guid("84fd87c3-8e35-453c-8814-5eed1ddde358"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6622),
                            Description = "Learn Node.js for building server-side applications",
                            DurationInWeeks = 8,
                            InstructorId = new Guid("05960a70-06b6-40e0-b18e-e03ddae0e5b5"),
                            IsDeleted = false,
                            IsPublished = true,
                            Level = 1,
                            Price = 79.99m,
                            Status = 1,
                            Title = "Node.js Backend Development"
                        },
                        new
                        {
                            Id = new Guid("bdbf0171-3513-4bfc-b69b-98291fec6d68"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6628),
                            Description = "Learn Python programming for data science",
                            DurationInWeeks = 10,
                            InstructorId = new Guid("05960a70-06b6-40e0-b18e-e03ddae0e5b5"),
                            IsDeleted = false,
                            IsPublished = true,
                            Level = 0,
                            Price = 59.99m,
                            Status = 1,
                            Title = "Python for Data Science"
                        },
                        new
                        {
                            Id = new Guid("5404eecb-f375-4f20-9826-af9f6f59f0e6"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6633),
                            Description = "Learn Flutter for building cross-platform mobile apps",
                            DurationInWeeks = 12,
                            InstructorId = new Guid("05960a70-06b6-40e0-b18e-e03ddae0e5b5"),
                            IsDeleted = false,
                            IsPublished = true,
                            Level = 1,
                            Price = 89.99m,
                            Status = 1,
                            Title = "Flutter Mobile App Development"
                        },
                        new
                        {
                            Id = new Guid("9bba6c5c-8642-4bf6-a0dd-c017c002ba73"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6639),
                            Description = "Learn the fundamentals of machine learning",
                            DurationInWeeks = 14,
                            InstructorId = new Guid("05960a70-06b6-40e0-b18e-e03ddae0e5b5"),
                            IsDeleted = false,
                            IsPublished = true,
                            Level = 2,
                            Price = 99.99m,
                            Status = 1,
                            Title = "Machine Learning Fundamentals"
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Enrollment", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("76ebfe4b-4856-4363-856e-4bd8ca3ec4be"),
                            CourseId = new Guid("51730bd4-b4e4-458f-b629-f9b349e2430c"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(7419),
                            EnrolledAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(7418),
                            Id = new Guid("ef8de6c1-7fb8-4a1b-9df4-57609bb4e714"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2eb373ae-f901-4b44-be20-ca4961665a83"),
                            Content = "In this lesson, we'll learn about variables and data types...",
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(7184),
                            Description = "Understanding variables and data types in C#",
                            DurationInMinutes = 30,
                            IsDeleted = false,
                            ModuleId = new Guid("cfb2f59e-36c4-4ce5-8bcb-1ece58aecaa3"),
                            Order = 1,
                            Title = "Variables and Data Types"
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfb2f59e-36c4-4ce5-8bcb-1ece58aecaa3"),
                            CourseId = new Guid("51730bd4-b4e4-458f-b629-f9b349e2430c"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(7122),
                            Description = "Learn the basics of C# syntax and programming concepts",
                            IsDeleted = false,
                            Order = 1,
                            Title = "Getting Started with C#"
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94327b86-838c-4bea-a857-4f09dff028a8"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(7354),
                            IsCorrect = true,
                            IsDeleted = false,
                            QuestionId = new Guid("7bde69dd-cd48-4dc6-aeff-15ede85ba071"),
                            Text = "A container for storing data"
                        },
                        new
                        {
                            Id = new Guid("f3f12085-bec1-4dbd-b42d-ca99f36051b4"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(7359),
                            IsCorrect = false,
                            IsDeleted = false,
                            QuestionId = new Guid("7bde69dd-cd48-4dc6-aeff-15ede85ba071"),
                            Text = "A method in C#"
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Progress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeSpent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Progress");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bde69dd-cd48-4dc6-aeff-15ede85ba071"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(7303),
                            IsDeleted = false,
                            Points = 10,
                            QuizId = new Guid("dd74619d-5b56-4446-be8a-409b79c316b3"),
                            Text = "What is a variable in C#?",
                            Type = 0
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PassingScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeLimitInMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd74619d-5b56-4446-be8a-409b79c316b3"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(7248),
                            Description = "Test your knowledge of C# basics",
                            InstructorId = new Guid("05960a70-06b6-40e0-b18e-e03ddae0e5b5"),
                            IsDeleted = false,
                            IsPublished = true,
                            ModuleId = new Guid("cfb2f59e-36c4-4ce5-8bcb-1ece58aecaa3"),
                            PassingScore = 70,
                            TimeLimitInMinutes = 30,
                            Title = "C# Basics Quiz"
                        });
                });

            modelBuilder.Entity("ELearning.Core.Domain.QuizAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Passed")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.ToTable("QuizAttempts");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("LessonId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Feedback")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("ELearning.Core.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05960a70-06b6-40e0-b18e-e03ddae0e5b5"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6502),
                            Email = "instructor@example.com",
                            FirstName = "John",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = "AQAAAAIAAYagAAAAELbHJBk5JqrA4j9w9G6h2Q6Y4/UdH0zYZRgT5r4HuPGXWEyEFnxiWNVJJBgZXg==",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("76ebfe4b-4856-4363-856e-4bd8ca3ec4be"),
                            CreatedAt = new DateTime(2025, 4, 22, 17, 26, 13, 682, DateTimeKind.Utc).AddTicks(6511),
                            Email = "student@example.com",
                            FirstName = "Jane",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Smith",
                            PasswordHash = "AQAAAAIAAYagAAAAELbHJBk5JqrA4j9w9G6h2Q6Y4/UdH0zYZRgT5r4HuPGXWEyEFnxiWNVJJBgZXg==",
                            Role = 0
                        });
                });

            modelBuilder.Entity("CategoryCourse", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Course", null)
                        .WithMany()
                        .HasForeignKey("EnrolledCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("EnrolledStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELearning.Core.Domain.Answer", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.QuizAttempt", "QuizAttempt")
                        .WithMany("Answers")
                        .HasForeignKey("QuizAttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuizAttempt");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Assignment", b =>
                {
                    b.HasOne("ELearning.Core.Domain.User", "Instructor")
                        .WithMany("Assignments")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.Module", "Module")
                        .WithMany("Assignments")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Category", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Course", b =>
                {
                    b.HasOne("ELearning.Core.Domain.User", "Instructor")
                        .WithMany("InstructedCourses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Enrollment", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.User", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Lesson", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Module", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Option", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Progress", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Lesson", "Lesson")
                        .WithMany("StudentProgress")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.User", "Student")
                        .WithMany("LessonProgress")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Question", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Quiz", b =>
                {
                    b.HasOne("ELearning.Core.Domain.User", "Instructor")
                        .WithMany("Quizzes")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.Module", "Module")
                        .WithMany("Quizzes")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ELearning.Core.Domain.QuizAttempt", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Quiz", "Quiz")
                        .WithMany("Attempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.User", "Student")
                        .WithMany("QuizAttempts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Resource", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Lesson", "Lesson")
                        .WithMany("Resources")
                        .HasForeignKey("LessonId");

                    b.HasOne("ELearning.Core.Domain.Module", "Module")
                        .WithMany("Resources")
                        .HasForeignKey("ModuleId");

                    b.Navigation("Lesson");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Review", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.User", "Student")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Submission", b =>
                {
                    b.HasOne("ELearning.Core.Domain.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearning.Core.Domain.User", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Modules");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Lesson", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("StudentProgress");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Module", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Lessons");

                    b.Navigation("Quizzes");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("ELearning.Core.Domain.Quiz", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ELearning.Core.Domain.QuizAttempt", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ELearning.Core.Domain.User", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Enrollments");

                    b.Navigation("InstructedCourses");

                    b.Navigation("LessonProgress");

                    b.Navigation("QuizAttempts");

                    b.Navigation("Quizzes");

                    b.Navigation("Reviews");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
